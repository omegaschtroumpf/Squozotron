<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player1 = -1;
player2 = -1;
enemies = -1;

globalvar score1; 
globalvar score2;

score1 = 0;
score2 = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

p1_focus_max = player1.FOCUS_MAX;
p1_focus = player1.character_focus;

//p2_focus_max = player2.FOCUS_MAX;
//p2_focus = player2.character_focus;

total_bar_width = p1_focus_max;
remaining_percentage = p1_focus / p1_focus_max;
used_percentage = (p1_focus_max - p1_focus) / p1_focus_max;
remaining_bar_width = remaining_percentage * total_bar_width;
used_bar_width = used_percentage * total_bar_width;

// draw remaining focus bar in appropriate color
bar_color = make_colour_hsv(remaining_percentage * 70, 255, 192);
line_color = make_color_hsv(70, 255, 192);
//merge_colour(c_yellow, c_green, remaining_percentage);

draw_rectangle_colour(player1.x - total_bar_width, player1.y + 100, player1.x - used_bar_width, player1.y + 80, bar_color, bar_color, bar_color, bar_color, false);
// draw used focus bar in red
if (used_bar_width &gt; 0)
    draw_rectangle_colour(player1.x - used_bar_width, player1.y + 100, player1.x, player1.y + 80, c_red, c_red, c_red, c_red, false);
// draw end marker for remaining focus
draw_rectangle_colour(player1.x - used_bar_width -1, player1.y + 100, player1.x - used_bar_width + 1, player1.y + 80, line_color, line_color, line_color, line_color, false);
            
/*
total_bar_width = p2_focus_max;
remaining_percentage = p2_focus / p2_focus_max;
used_percentage = (p2_focus_max - p2_focus) / p2_focus_max;
remaining_bar_width = remaining_percentage * total_bar_width;
used_bar_width = used_percentage * total_bar_width;

// draw remaining focus bar in green
draw_rectangle_colour(room_width - 100 - total_bar_width, 100, room_width - 100 - used_bar_width, 80, c_green, c_green, c_green, c_green, false);
// draw used focus bar in red
if (used_bar_width &gt; 0)
    draw_rectangle_colour(room_width - 100 - used_bar_width, 100, room_width - 100, 80, c_red, c_red, c_red, c_red, false);
*/    
/*    
//draw some score
draw_text(room_width -200, 125,"Score:"+ string(score2))
draw_text(room_width -700, 125,"Score:"+ string(score1)) 
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
