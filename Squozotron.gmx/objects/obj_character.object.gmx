<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_character_solids</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character constants and variables

// constants
MOVEMENT_SPEED = 3;
ATTACK_MOVEMENT_MULTIPLIER = .5;

RESPAWN_DELAY = 10;
DAMAGE_DELAY = 15;
NORMAL_IMAGE = 0;
DAMAGE_IMAGE = 1;
BLOCKING_IMAGE = 2;
CHARACTER_KILLED_ROOM_SPEED = 15;
NORMAL_ROOM_SPEED = 30;


// Sprite property assignments - won't be needed once we have custom sprites
//image_xscale = 3;
//image_yscale = 3;
image_speed = 0;
image_angle = direction;

// character variables
character_health = 2; //currently just tracking player hits
can_move = true; // applies to motion and auto-target direction changes
stunned = false;
invincible = false; // this stays set for the greater of minimum block time, or the time that the player holds the block button beyond minimum block time
random_move = 0; // 1-29
killed = false;
raw_squoze = 0;
squoze_value = 0;
shooting = 0;
can_shoot = true;


// related objects
controlID = 0;
statsID = 0;



// player controller input variables
deviceID = -1; // this is set by the room or when character dies and replacement is made
x_axisL = 0;
y_axisL = 0;
x_axisR = 0;
y_axisR = 0;
shoulder_r_pressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Related Objects

if (swordID) {
with (swordID) instance_destroy();
}

ds_list_destroy(softTargetAngles);
ds_list_destroy(attitudesList);

// take myself out of other characters' attitude lists
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character Death

// Reset room speed to normal
rm_arena.room_speed = NORMAL_ROOM_SPEED;
characterDeath();
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// turn off recoil
gamepad_set_vibration(deviceID, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input/AI script only if character can use input right now

// get input if appropriate
characterInput();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calls script: characterStepHelper

characterStepHelper();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_character">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Quickstep And RegularCollisions

    // get out of collision
    x = xprevious;
    y = yprevious;
    other.x = other.xprevious;
    other.y = other.yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  //draw squoze triangle
  prev_alpha = draw_get_alpha();
  draw_set_alpha(global.SQUOZE_CONE_ALPHA + global.SQUOZE_CONE_ALPHA * squoze_value);
  
  // get triangle points not origin using image angle
  x1 = x+dcos(image_angle)*global.SQUOZE_CONE_ORIGIN_ADJUST;
  y1 = y-dsin(image_angle)*global.SQUOZE_CONE_ORIGIN_ADJUST;
  x2 = x+dcos(image_angle - global.SQUOZE_CONE_SIZE*(1-squoze_value*global.SQUOZE_MAX))*1200;
  x3 = x+dcos(image_angle + global.SQUOZE_CONE_SIZE*(1-squoze_value*global.SQUOZE_MAX))*1200;
  y2 = y-dsin(image_angle - global.SQUOZE_CONE_SIZE*(1-squoze_value*global.SQUOZE_MAX))*1200;
  y3 = y-dsin(image_angle + global.SQUOZE_CONE_SIZE*(1-squoze_value*global.SQUOZE_MAX))*1200;
  
  draw_triangle_colour(x1,y1,x2,y2,x3,y3,c_red,c_orange,c_orange,false);
  draw_set_alpha(prev_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
