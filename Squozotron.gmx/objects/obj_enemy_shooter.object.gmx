<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_seeker2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/// setup
image_speed = 0;
seek_speed = 1.5;

can_shoot = 1;
bullets_before_pause = 3;
shoot_pause_steps = 30;
bullet_count = 0;
BULLET_STRENGTH = 10; 

destination_x = 0;
destination_y = 0;

crx1 = 0;
cry1 = 0;
crx2 = 0;
cry2 = 0;

enemy_health = 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// enable shooting
can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// enable shooting
can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mp_potential_step towards player avoiding solids only

image_angle = point_direction(x, y, obj_character.x, obj_character.y);
dist = point_distance(x, y, obj_character.x, obj_character.y);
// do i have line of sight?  check 1 degree to either side: 2 lines instead of 1
x1 = x + dcos(image_angle - 1) * dist;
y1 = y - dsin(image_angle - 1) * dist;
x2 = x + dcos(image_angle + 1) * dist;
y2 = y - dsin(image_angle + 1) * dist;

coll = false;
if (collision_line(x, y, x1, y1, obj_enemy, true, true) || collision_line(x, y, x2, y2, obj_enemy, true, true))
    coll = true;
if (!coll &amp;&amp; (collision_line(x, y, x1, y1, obj_solidwall, true, true) || collision_line(x, y, x2, y2, obj_solidwall, true, true)))
    coll = true;
if (!coll) {
    angle1 = image_angle + 30;
    crx1 = x + dcos(angle1) * sqrt((2 * sqr(.5 * sprite_width)));
    cry1 = y - dsin(angle1) * sqrt((2 * sqr(.5 * sprite_width)));
    angle2 = image_angle - 30;
    crx2 = x + dcos(angle2) * sqrt((2 * sqr(.5 * sprite_width)));
    cry2 = y - dsin(angle2) * sqrt((2 * sqr(.5 * sprite_width)));
    if (collision_line(crx1, cry1, crx2, cry2, obj_solidwall, true, true) || collision_line(crx1, cry1, crx2, cry2, obj_actor, true, true))
        coll = true;
}

if (coll || (alarm[2] &gt; 0)) {
    // am i close enough?  zero my destination
    if (abs(x - destination_x) &lt; 100 || abs(y - destination_y) &lt; 100) {
        destination_x = 0;
        destination_y = 0;
    }
    // do i got a destination?
    if (destination_x == 0 &amp;&amp; destination_y == 0) {
        // get one
        // pick a new destination random offset from player current position
        // or from my position if i'm in the middle of shooting
        if (irandom(1) == 1) offset_sign = -1;
        else offset_sign = 1;
        if (alarm[2] &gt; 0) destination_x = x + offset_sign * irandom_range(120,200);
        else destination_x = obj_character.x + offset_sign * irandom(100);
        if (irandom(1) == 1) offset_sign = -1;
        else offset_sign = 1;
        if (alarm[2] &gt; 0) destination_y = y + offset_sign * irandom_range(120,200);
        else destination_y = obj_character.y + offset_sign * irandom(100);
    }
    mp_potential_settings(45, 5, 5, true);
    mp_potential_step(destination_x, destination_y, seek_speed, true);
}
else {
    destination_x = 0;
    destination_y = 0;
    if (can_shoot) {
        // make a bullet
        bullet = instance_create(x,y,obj_bullet);
        bullet.shooter = id;
        bullet.damage = BULLET_STRENGTH;
        bullet_count++;
        direction_to_character = point_direction(x, y, obj_character.x, obj_character.y);
        // start bullet at character origin
        bullet.x = x;
        bullet.y = y;
       
        bullet.image_angle = direction_to_character + random_range(-2,2);
        bullet.direction = bullet.image_angle;
        bullet.speed = global.BULLET_SPEED / 2;    
        
        // set the alarm for time between 
        can_shoot = false;
        if (bullet_count == bullets_before_pause) {
            alarm[2] = shoot_pause_steps;
            bullet_count = 0;
        }
        else
            alarm[1] = global.STEPS_BETWEEN_BULLETS * 2;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.shooter != id) {
    enemy_health -= other.damage;
    image_index++;
    // TODO die at the right time    
    if (enemy_health &lt;= 0) {
        image_speed = 1;
        if (!alarm[0]) alarm[0] = image_number * 2 - 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// deactivate bullet
if (other.shooter != id)
    //instance_deactivate_object(other);
    with (other)
        instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_red);

draw_line(crx1, cry1, crx2, cry2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
